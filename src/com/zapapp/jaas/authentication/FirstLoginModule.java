//validates based on user name alonepackage com.zapapp.jaas.authentication;import javax.security.auth.spi.LoginModule;import javax.security.auth.login.LoginException;import java.security.Principal;import javax.security.auth.Subject;import java.io.IOException;import javax.security.auth.callback.UnsupportedCallbackException;import javax.security.auth.callback.NameCallback;import javax.security.auth.callback.CallbackHandler;import java.util.Map;import javax.security.auth.callback.Callback;public class FirstLoginModule implements LoginModule {		private Subject subject;	private CallbackHandler callbackHandler;	private boolean isLoginsuccess;	private Principal principal;	private String userLoginName;		public boolean abort ()		throws LoginException	{		System.out.println ("THIS IS INSIDE THE ABORT METHOD OF FIRST LOGIN MODULE");				isLoginsuccess = false;		userLoginName = null;		if (subject.getPrincipals().contains (principal))		{			subject.getPrincipals().remove (principal);		}		principal = null;				return true;	} 		public boolean commit ()		throws LoginException	{		System.out.println ("INSIDE THE COMMIT METHOD OF FIRST LOGIN MODULE " + isLoginsuccess);				if (!isLoginsuccess)		{			throw new LoginException ("THE LOGIN WAS NOT SUCCESSFULL");		}				Principal principal = new MyPrincipal (userLoginName);		if (! subject.getPrincipals().contains (principal))		{			subject.getPrincipals().add (principal);		}		return true;	}		public boolean login ()		throws LoginException	{		System.out.println ("INSIDE THE LOGIN METHOD OF FIRSTLOGINMODULE");				if (null == callbackHandler )			{			throw new LoginException ("CALLBACKHANDLER IS NULL");		}				Callback[] callbacks = new Callback [1];		callbacks[0] = new NameCallback (" UserName ");				try		{			callbackHandler.handle (callbacks);			}		catch (IOException eIO)		{			isLoginsuccess = false;				throw new LoginException ("LOGIN FAILED DUE TO IO EXCEPTION");					}		catch (UnsupportedCallbackException eUCE)		{			isLoginsuccess = false;				throw new LoginException ("LOGIN FAILED DUE TO UNSUPPORTEDCALLBACKHANDLER ");		}		NameCallback nameCallback = (NameCallback)callbacks[0];		if (nameCallback.getName().equalsIgnoreCase ("rekha"))		{			isLoginsuccess = true;			userLoginName = nameCallback.getName();		}		return isLoginsuccess;					}		public boolean logout () 		throws LoginException	{		System.out.println ("INSIDE THE LOGOUT METHOD OF FIRST LOGIN MODULE");								isLoginsuccess = false;		subject.getPrincipals ().remove (principal);		principal = null;		userLoginName = null;				return true;	}		public void initialize (Subject subject, 		CallbackHandler callbackHandler, Map sharedState,		Map options)	{		System.out.println ("INSIDE THE INITIALIZE METHOD OF FIRST LOGIN MODULE");								this.subject = subject;		this.callbackHandler = callbackHandler;		isLoginsuccess = false;		userLoginName = null;	}}