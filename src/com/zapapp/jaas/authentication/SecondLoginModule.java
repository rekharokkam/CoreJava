package com.zapapp.jaas.authentication;import javax.security.auth.spi.LoginModule;import javax.security.auth.login.LoginException;import java.security.Principal;import javax.security.auth.Subject;import java.io.IOException;import javax.security.auth.callback.UnsupportedCallbackException;import javax.security.auth.callback.NameCallback;import javax.security.auth.callback.PasswordCallback;import javax.security.auth.callback.CallbackHandler;import java.util.Map;import javax.security.auth.callback.Callback;public class SecondLoginModule implements LoginModule{	private Subject subject;	private CallbackHandler callbackHandler;	private String userName;	private char[] password;	private boolean isLoginSuccess;	private Principal principal;		//added only for testing	private static char[] staticPWD = new char[2];	static	{		staticPWD[0] = 'a';					staticPWD[1] = 'b';				}		//added only for testing 		public boolean abort ()		throws LoginException	{		System.out.println ("INSIDE THE ABORT METHOD OF SECOND LOGIN MODULE");				isLoginSuccess = false;		clearPassword ();		if (subject.getPrincipals ().contains (principal) )		{			subject.getPrincipals().remove (principal);		}		principal = null;		userName = null;				return true;	}		public boolean commit ()		throws LoginException	{		System.out.println ("INSIDE THE COMMIT METHOD OF SECOND LOGIN MODULE");						//add the principal to the subject		if (!isLoginSuccess)		{			throw new LoginException ("LOGIN EXCEPTION");		}		isLoginSuccess = true;		principal = new MyPrincipal (userName);		if (! subject.getPrincipals().contains (principal))		{			subject.getPrincipals().add (principal);		}				return true;	}		public void initialize (Subject subject, CallbackHandler callbackHandler, 		Map sharedState, Map options)	{		System.out.println ("INSIDE THE INITIALIZE METHOD OF SECOND LOGIN MODULE");								this.subject = subject;		this.callbackHandler = callbackHandler;		isLoginSuccess = false;		userName = null;		clearPassword ();	}		public boolean login ()		throws LoginException	{		System.out.println ("INSIDE THE LOGIN METHOD OF SECOND LOGIN MODULE");								if (null == callbackHandler )		{			throw new LoginException ("CALLBACKHANDLER IS NULL");		}				Callback[] callbacks = new Callback[2];		callbacks[0] = new NameCallback ("UserName");		callbacks[1] = new PasswordCallback ("Password", false);				try		{			callbackHandler.handle (callbacks);			NameCallback nameCallback = (NameCallback)callbacks[0];			userName = nameCallback.getName ();						if ( (null !=  userName) && (!userName.equals ("")) )			{				if  (userName.equalsIgnoreCase ("rekha")) 				{					isLoginSuccess = true;				}			}			System.out.println ("THE NAME CALLBACKHANDLER LOGIN StatUS = " + isLoginSuccess);						if (isLoginSuccess)			{				System.out.println ("INSIDE THE ISlOGINSUCCESS ");								PasswordCallback passwordCallback = (PasswordCallback)callbacks[1];				password = passwordCallback.getPassword ();								passwordCallback.clearPassword ();								if (null != password && password.length > 0)				{					//check if the lengths of the passwords is same 					if (password.length != staticPWD.length)					{						isLoginSuccess = false;						return isLoginSuccess;					}										for (int passwordCounter = password.length; --passwordCounter >= 0;)					{						if (password[passwordCounter] != staticPWD[passwordCounter])						{							isLoginSuccess = false;							return isLoginSuccess;						}					}				}			}		}		catch (IOException eIO)		{			isLoginSuccess = false;			throw new LoginException ("THERE WAS AN IO EXCEPTION");		}		catch (UnsupportedCallbackException eUCE)		{			isLoginSuccess = false;			throw new LoginException ("THERE WAS AN UNSUPPORTEDCALLBACK EXCEPTION");		}		return isLoginSuccess;			}		public boolean logout ()		throws LoginException	{		System.out.println ("INSIDE THE LOGOUT METHOD OF SECOND LOGIN MODULE");								if (!isLoginSuccess)		{			throw new LoginException ("LOGIN IS ALREADY FALSE.");		}		clearPassword ();		userName = null;				isLoginSuccess = false;						if (subject.getPrincipals ().contains (principal) )		{			subject.getPrincipals().remove (principal);		}		principal = null;						return true;	}		private void clearPassword ()	{			if ( (null != password) && (password.length > 0) )		{			for (int passwordCounter = password.length; --passwordCounter >= 0;)			{				password[passwordCounter] = ' ';			}			password = null;		}	}}